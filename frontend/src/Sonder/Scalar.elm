-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Sonder.Scalar exposing (Codecs, Id(..), JSONString(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type JSONString
    = JSONString String


defineCodecs :
    { codecId : Codec valueId
    , codecJSONString : Codec valueJSONString
    }
    -> Codecs valueId valueJSONString
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueJSONString
    ->
        { codecId : Codec valueId
        , codecJSONString : Codec valueJSONString
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueJSONString
    = Codecs (RawCodecs valueId valueJSONString)


type alias RawCodecs valueId valueJSONString =
    { codecId : Codec valueId
    , codecJSONString : Codec valueJSONString
    }


defaultCodecs : RawCodecs Id JSONString
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJSONString =
        { encoder = \(JSONString raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map JSONString
        }
    }
