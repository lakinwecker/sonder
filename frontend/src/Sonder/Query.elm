-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Sonder.Query exposing (GameRequiredArguments, GamesOptionalArguments, PlayerRequiredArguments, PlayersOptionalArguments, game, games, player, players)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Sonder.InputObject
import Sonder.Interface
import Sonder.Object
import Sonder.Scalar
import Sonder.ScalarCodecs
import Sonder.Union


type alias PlayerRequiredArguments =
    { id : Sonder.ScalarCodecs.Id }


{-| The ID of the object
-}
player : PlayerRequiredArguments -> SelectionSet decodesTo Sonder.Object.PlayerNode -> SelectionSet (Maybe decodesTo) RootQuery
player requiredArgs object_ =
    Object.selectionForCompositeField "player" [ Argument.required "id" requiredArgs.id (Sonder.ScalarCodecs.codecs |> Sonder.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias PlayersOptionalArguments =
    { before : OptionalArgument String
    , after : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , username : OptionalArgument String
    }


players : (PlayersOptionalArguments -> PlayersOptionalArguments) -> SelectionSet decodesTo Sonder.Object.PlayerNodeConnection -> SelectionSet (Maybe decodesTo) RootQuery
players fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { before = Absent, after = Absent, first = Absent, last = Absent, username = Absent }

        optionalArgs =
            [ Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "username" filledInOptionals.username Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "players" optionalArgs object_ (identity >> Decode.nullable)


type alias GameRequiredArguments =
    { id : Sonder.ScalarCodecs.Id }


{-| The ID of the object
-}
game : GameRequiredArguments -> SelectionSet decodesTo Sonder.Object.GameNode -> SelectionSet (Maybe decodesTo) RootQuery
game requiredArgs object_ =
    Object.selectionForCompositeField "game" [ Argument.required "id" requiredArgs.id (Sonder.ScalarCodecs.codecs |> Sonder.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias GamesOptionalArguments =
    { before : OptionalArgument String
    , after : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , whitePlayer_Username : OptionalArgument Sonder.ScalarCodecs.Id
    , blackPlayer_Username : OptionalArgument Sonder.ScalarCodecs.Id
    }


games : (GamesOptionalArguments -> GamesOptionalArguments) -> SelectionSet decodesTo Sonder.Object.GameNodeConnection -> SelectionSet (Maybe decodesTo) RootQuery
games fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { before = Absent, after = Absent, first = Absent, last = Absent, whitePlayer_Username = Absent, blackPlayer_Username = Absent }

        optionalArgs =
            [ Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "whitePlayer_Username" filledInOptionals.whitePlayer_Username (Sonder.ScalarCodecs.codecs |> Sonder.Scalar.unwrapEncoder .codecId), Argument.optional "blackPlayer_Username" filledInOptionals.blackPlayer_Username (Sonder.ScalarCodecs.codecs |> Sonder.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "games" optionalArgs object_ (identity >> Decode.nullable)
