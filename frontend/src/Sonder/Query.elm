-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Sonder.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Sonder.InputObject
import Sonder.Interface
import Sonder.Object
import Sonder.Scalar
import Sonder.ScalarCodecs
import Sonder.Union


type alias PlayerRequiredArguments =
    { username : String }


player : PlayerRequiredArguments -> SelectionSet decodesTo Sonder.Object.Player -> SelectionSet (Maybe decodesTo) RootQuery
player requiredArgs object_ =
    Object.selectionForCompositeField "player" [ Argument.required "username" requiredArgs.username Encode.string ] object_ (identity >> Decode.nullable)


type alias PlayersOptionalArguments =
    { id : OptionalArgument Float
    , username_Icontains : OptionalArgument String
    , username_Iexact : OptionalArgument String
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , ordering : OptionalArgument String
    }


{-| Player list

  - limit - Number of results to return per page. Default 'default\_limit': None, and 'max\_limit': None
  - offset - The initial index from which to return the results. Default: 0
  - ordering - A string or comma delimited string values that indicate the default ordering when obtaining lists of objects.

-}
players : (PlayersOptionalArguments -> PlayersOptionalArguments) -> SelectionSet decodesTo Sonder.Object.Player -> SelectionSet (List (Maybe decodesTo)) RootQuery
players fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, username_Icontains = Absent, username_Iexact = Absent, limit = Absent, offset = Absent, ordering = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id Encode.float, Argument.optional "username_Icontains" filledInOptionals.username_Icontains Encode.string, Argument.optional "username_Iexact" filledInOptionals.username_Iexact Encode.string, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "ordering" filledInOptionals.ordering Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "players" optionalArgs object_ (identity >> Decode.nullable >> Decode.list)


userStatus : SelectionSet decodesTo Sonder.Object.UserStatus -> SelectionSet (Maybe decodesTo) RootQuery
userStatus object_ =
    Object.selectionForCompositeField "userStatus" [] object_ (identity >> Decode.nullable)
