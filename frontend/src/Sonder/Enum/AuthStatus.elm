-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Sonder.Enum.AuthStatus exposing (AuthStatus(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type AuthStatus
    = Authorized
    | Unauthorized
    | Anonymous


list : List AuthStatus
list =
    [ Authorized, Unauthorized, Anonymous ]


decoder : Decoder AuthStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "AUTHORIZED" ->
                        Decode.succeed Authorized

                    "UNAUTHORIZED" ->
                        Decode.succeed Unauthorized

                    "ANONYMOUS" ->
                        Decode.succeed Anonymous

                    _ ->
                        Decode.fail ("Invalid AuthStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : AuthStatus -> String
toString enum =
    case enum of
        Authorized ->
            "AUTHORIZED"

        Unauthorized ->
            "UNAUTHORIZED"

        Anonymous ->
            "ANONYMOUS"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe AuthStatus
fromString enumString =
    case enumString of
        "AUTHORIZED" ->
            Just Authorized

        "UNAUTHORIZED" ->
            Just Unauthorized

        "ANONYMOUS" ->
            Just Anonymous

        _ ->
            Nothing
