#!/usr/bin/env python
import click
import inspect
import os
import os.path
import sys
import django

from dotenv import load_dotenv

bin_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
sys.path.insert(0, os.path.join(bin_dir, '..'))


@click.group()
def cli():
    load_dotenv()
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sonder.settings')
    django.setup()

#-------------------------------------------------------------------------------
# PGN Commands
#-------------------------------------------------------------------------------
@cli.group()
def pgn():
    pass

@pgn.command(name='import')
@click.option('--pgn', required=True, help='The pgn of game(s) to be added to database')
@click.option('--encoding', default='ISO-8859-1', required=False, help='Encoding of the file')
def pgn_import(pgn, encoding):
    from sonder.utils import import_pgn_to_db
    import_pgn_to_db(pgn, encoding=encoding)

@pgn.command(name='to_uci')
@click.option('--pgn', required=True, help='pgn to be converted to UCI moves')
def pgn_to_uci(pgn):
    from sonder.utils import pgn_to_uci
    print(' '.join(pgn_to_uci(open(pgn, 'r').read())))

#-------------------------------------------------------------------------------
# League Commands
#-------------------------------------------------------------------------------
@cli.group()
def league():
    pass

@league.command(name='download-games')
@click.option('--league', required=True, help='team4545, lonewolf')
@click.option('--season', help='number for team4545, number with or without u1800 for lonewolf')
def league_download_games(league, season=None):
    from sonder.league.utils import download_new_games
    download_new_games(league, season)

@league.command(name='get-season-ids')
@click.option('--league', required=True, help='team4545, lonewolf')
def league_get_season_ids(league):
    from sonder.league.utils import get_season_ids_for_league
    print(get_season_ids_for_league(league))


#-------------------------------------------------------------------------------
# Lichess Commands
#-------------------------------------------------------------------------------
@cli.group()
def lichess():
    pass

@lichess.command(name='download-games')
@click.option('--gameids', required=True, help='List of Lichess game IDs', multiple='true')
def lichess_download_games(gameids):
    from sonder.league.utils import get_game_pgns
    from sonder.utils import import_pgn_to_db
    for pgn in get_game_pgns(gameids):
        import_pgn_to_db(pgn, encoding="utf-8")

#-------------------------------------------------------------------------------
# Lichess Commands
#-------------------------------------------------------------------------------
@cli.group()
def cr():
    pass

@cr.command(name='import')
@click.option('--database', required=True, help='The sqlite database to import')
@click.option('--analysis-source', required=True, help='Name of the analysis source')
@click.option('--stockfish-version', required=True, help='The stockfish version of the analysis')
def cr_import(database, analysis_source, stockfish_version):
    from sonder.cr import import_cr_database
    import_cr_database(database, analysis_source, stockfish_version)

@cr.command(name='report')
@click.option('--gameids', required=True, help='The games to include in the report as a whitespace separated string of lichess game IDs')
def cr_report(gameids):
    from sonder.cr import cr_report
    cr_report(gameids.split())

@cr.command(name='game-cps-debug')
@click.option('--gameids', required=True, help='The games to include in the report as a whitespace separated string of lichess game IDs')
def cr_game_cps_debug(gameids):
    """Simple tool to debug game cps. Compare this output to the output of the following commands run in a cr database:

    sqlite> .mode csv
    sqlite> .out moves.csv
    sqlite> SELECT color, number, pv1_eval, pv2_eval, pv3_eval, pv4_eval, pv5_eval FROM move WHERE game_id='{game_id}' ORDER BY number ASC, color DESC;

    """
    from sonder.analysis.models import GameAnalysis
    import itertools
    for game_id in gameids.split():
        ga = GameAnalysis.objects.get(game__lichess_id=game_id)
        colors = itertools.cycle(["w", "b"])
        for color, move, a in zip(colors, range(1024), ga.analysis):
            s = [pov['score']['cp'] for pov in a['pvs']]
            if move % 2 == 1:
                move = move - 1
            move = (move // 2) + 1
            print(f"{color},{move},{s[0]},{s[1]},{s[2]},{s[3]},{s[4]}")


if __name__ == '__main__':
    cli()
